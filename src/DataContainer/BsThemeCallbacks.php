<?php
/**
 *  Copyright Information
 *
 * @copyright: 2018 agentur fipps e.K.
 * @author   : Arne Borchert <arne.borchert@fipps.de>
 * @license  : LGPL 3.0+
 */

namespace Fipps\BootstrapCustomizerBundle\DataContainer;


use Contao\Automator;
use Contao\File;
use Leafo\ScssPhp\Compiler;
use Leafo\ScssPhp\Formatter\Compressed;
use Leafo\ScssPhp\Formatter\Expanded;
use Psr\Log\LogLevel;
use Contao\CoreBundle\Monolog\ContaoContext;

class BsThemeCallbacks
{

    private $oldThemeColors;

    /**
     * @param \DataContainer $dc
     * @throws \Exception
     */
    public function onDelete(\DataContainer $dc)
    {
        $data     = $dc->activeRecord->row();
        $path     = \FilesModel::findById($data['path'])->path;
        $filePath = $path.'/'.strtolower(str_replace(' ', '_', trim($data['title'])));

        try {
            $file = new File($filePath.'.css');
            $file->delete();
        } catch (\Exception $e) {
            $context = $e->getContext();
            $logger  = \System::getContainer()->get('monolog.logger.contao');
            $logger->log(
                LogLevel::WARNING,
                'Delete Bootstrap Theme File: '.$context['strFile'],
                array(
                    'contao' => new ContaoContext(
                        __CLASS__.'::'.__FUNCTION__, TL_GENERAL
                    ),
                )
            );
        }
        try {
            $file = new File($filePath.'scss');
            $file->delete();
        } catch (\Exception $e) {
            $context = $e->getContext();
            $logger  = \System::getContainer()->get('monolog.logger.contao');
            $logger->log(
                LogLevel::WARNING,
                'Delete Bootstrap Theme File: '.$context['strFile'],
                array(
                    'contao' => new ContaoContext(
                        __CLASS__.'::'.__FUNCTION__, TL_GENERAL
                    ),
                )
            );
        }


    }

    /**
     * @param \DataContainer $dc
     * @throws \Exception
     */
    public function onSubmit(\DataContainer $dc)
    {
        $data = $dc->activeRecord->row();
        foreach ($data as $key => $value) {
            if (!is_array($value)) {
                $arr = unserialize($value);
                if ($arr !== false) {
                    $data[$key] = $arr;
                }
            }

        }
        $path = \FilesModel::findById($data['path'])->path;

        $twigRenderer = \System::getContainer()->get('templating');
        $rendered     = $twigRenderer->render('@FippsBootstrapCustomizer/theme.scss.twig', $data);

        // Write rendered scss.twig to SCSS file
        $warning = <<<EOF
/*------------------------------------------- */
/*              W A R N I N G                 */
/*     DO NOT EDIT THIS FILE MANUALLY         */
/*     THIS FILE WILL BE OVERWRITTEN!         */
/*------------------------------------------- */

EOF;

        $filePath = $path.'/'.strtolower(str_replace(' ', '_', trim($data['title'])).'.scss');
        $file     = new File($filePath);
        $file->write($warning.$rendered);
        $file->close();


        $scssCompiler = new Compiler();
        $scssCompiler->addImportPath(TL_ROOT.'/vendor/twbs/bootstrap/scss');
        $scssCompiler->setFormatter((\Config::get('debugMode') ? Expanded::class : Compressed::class));
        $css = $scssCompiler->compile($rendered);

        $filePath = $path.'/'.strtolower(str_replace(' ', '_', trim($data['title'])).'.css');
        $file     = new File($filePath);
        $file->write($warning.$css);
        $file->close();


        //$isAutoPrefixerInstalled = class_exists('Agoat\AutoPrefixerBundle\Contao\AutoPrefixer');


        // Refresh CSS-Files
        $automator = new Automator();
        $automator->purgeScriptCache();
    }

    /**
     * @param array          $row
     * @param string         $label
     * @param \DataContainer $dc
     * @param array          $args
     * @return array
     */
    public function getAuthorLabel(array $row, string $label, \DataContainer $dc, array $args)
    {

        $user = \UserModel::findById($args[1]);
        if ($user !== false) {
            $args[1] = $user->name;
        }

        return $args;
    }

    public function checkThemeColors(string $val, \DataContainer $dc)
    {

        $themeColors = deserialize($val);

//        $hasPrimary = false;
//        $hasSuccess = false;
//        $hasDanger  = false;

        // Check which mandatory colors are missing
        foreach ($themeColors as &$themeColor) {
            $themeColor['name'] = strtolower($themeColor['name']);
//            if ($themeColor['name'] == 'primary') {
//                $hasPrimary = true;
//            } else if ($themeColor['name'] == 'success') {
//                $hasSuccess = true;
//            } else if ($themeColor['name'] == 'danger') {
//                $hasDanger = true;
//            }
        }

//        $this->oldThemeColors = deserialize($dc->activeRecord->themeColors);

        // Add mandatory colors from previous version
//        if (!$hasDanger) {
//            array_unshift($themeColors, $this->getColor('danger'));
//        }
//        if (!$hasSuccess) {
//            array_unshift($themeColors, $this->getColor('success'));
//        }
//        if (!$hasPrimary) {
//            array_unshift($themeColors, $this->getColor('primary'));
//        }

        return serialize($themeColors);
    }

    private function getColor($name)
    {
        if ($key = array_search($name, array_column($this->oldThemeColors, 'name'))) {
            return $this->oldThemeColors[$key];
        }

        return '';
    }

}