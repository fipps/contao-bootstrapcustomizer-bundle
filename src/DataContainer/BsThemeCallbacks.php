<?php
/**
 *  Copyright Information
 *
 * @copyright: 2018 agentur fipps e.K.
 * @author   : Arne Borchert <arne.borchert@fipps.de>
 * @license  : LGPL 3.0+
 */

namespace Fipps\BootstrapCustomizerBundle\DataContainer;


use Contao\Automator;
use Contao\Backend;
use Contao\File;
use Contao\StringUtil;
use Psr\Log\LogLevel;
use Contao\CoreBundle\Monolog\ContaoContext;
use ScssPhp\ScssPhp\Compiler;
use ScssPhp\ScssPhp\Formatter\Compressed;
use ScssPhp\ScssPhp\Formatter\Expanded;
use Twig\Environment as TwigEnvironment;

class BsThemeCallbacks extends Backend
{

    /**
     * @var TwigEnvironment
     */
    private $twig;

    public function __construct(TwigEnvironment $twig)
    {
        parent::__construct();
        $this->twig = $twig;
    }

    /**
     * @param \DataContainer $dc
     * @throws \Exception
     */
    public function onDelete(\DataContainer $dc)
    {
        $data     = $dc->activeRecord->row();
        $path     = \FilesModel::findById($data['path'])->path;
        $filePath = $path.'/'.strtolower(str_replace(' ', '_', trim($data['title'])));

        try {
            $file = new File($filePath.'.css');
            $file->delete();
        } catch (\Exception $e) {
            $context = $e->getContext();
            $logger  = \System::getContainer()->get('monolog.logger.contao');
            $logger->log(
                LogLevel::WARNING,
                'Delete Bootstrap Theme File: '.$context['strFile'],
                array(
                    'contao' => new ContaoContext(
                        __CLASS__.'::'.__FUNCTION__, TL_GENERAL
                    ),
                )
            );
        }
        try {
            $file = new File($filePath.'scss');
            $file->delete();
        } catch (\Exception $e) {
            $context = $e->getContext();
            $logger  = \System::getContainer()->get('monolog.logger.contao');
            $logger->log(
                LogLevel::WARNING,
                'Delete Bootstrap Theme File: '.$context['strFile'],
                array(
                    'contao' => new ContaoContext(
                        __CLASS__.'::'.__FUNCTION__, TL_GENERAL
                    ),
                )
            );
        }


    }

    /**
     * @param \DataContainer $dc
     * @throws \Exception
     */
    public function onSubmit(\DataContainer $dc)
    {
        $data = $dc->activeRecord->row();

        //Remove useTinyMCE for other themes if it is selected in this theme
        if ($data['useTinyMCE'] == '1') {
            $sql      = "UPDATE tl_bs_theme SET useTinyMCE = 0 WHERE id != ?";
            $database = \Database::getInstance();
            $database->prepare($sql)->execute($data['id']);
        }

        // Render SCSS
        foreach ($data as $key => $value) {
            if (!is_array($value)) {
                $arr = unserialize($value);
                if ($arr !== false) {
                    $data[$key] = $arr;
                }
            }

        }
        $path = \FilesModel::findById($data['path'])->path;

        //$twigRenderer  = \System::getContainer()->get('templating');
        $renderedTheme = $this->twig->render('@FippsBootstrapCustomizer/theme.scss.twig', $data);
        $renderedTypo  = $this->twig->render('@FippsBootstrapCustomizer/typo.scss.twig', $data);

        // Write SCSS files
        $filePath = $path.'/'.strtolower(str_replace(' ', '_', trim($data['title'])));
        $this->writeFiles($filePath, $renderedTheme);
        $this->writeFiles($filePath.'_typo', $renderedTypo);

        // Refresh CSS-Files
        $automator = new Automator();
        $automator->purgeScriptCache();
    }

    /**
     * @param array          $row
     * @param string         $label
     * @param \DataContainer $dc
     * @param array          $args
     * @return array
     */
    public function getAuthorLabel(array $row, string $label, \DataContainer $dc, array $args)
    {

        $user = \UserModel::findById($args[1]);
        if ($user !== false) {
            $args[1] = $user->name;
        }

        return $args;
    }

    /**
     * @param string $val
     * @return string
     */
    public function checkThemeColors(string $val)
    {

        $themeColors = StringUtil::deserialize($val);

        // Check which mandatory colors are missing
        foreach ($themeColors as &$themeColor) {
            $themeColor['name'] = strtolower($themeColor['name']);
        }

        return serialize($themeColors);
    }

    /**
     * @param string $filePath
     * @param string $data
     * @throws \Exception
     */
    private function writeFiles(string $filePath, string $data)
    {
        $warning = <<<EOF
/*------------------------------------------- */
/*              W A R N I N G                 */
/*     DO NOT EDIT THIS FILE MANUALLY         */
/*     THIS FILE WILL BE OVERWRITTEN!         */
/*------------------------------------------- */

EOF;

        $scssFile = new File($filePath.'.scss');
        $scssFile->write($warning.$data);
        $scssFile->close();

        $scssCompiler = new Compiler();
        $scssCompiler->addImportPath(TL_ROOT.'/vendor/twbs/bootstrap/scss');
        $scssCompiler->setFormatter((\Config::get('debugMode') ? Expanded::class : Compressed::class));
        $css = $scssCompiler->compile($data);

        $cssFile = new File($filePath.'.css');
        $cssFile->write($warning.$css);
        $cssFile->close();
    }
}